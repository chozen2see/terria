"use strict";
import URI from "urijs";
import i18next from "i18next";
import { runInAction } from "mobx";
import loadBlob from "../../../Core/loadBlob";
import CesiumMath from "terriajs-cesium/Source/Core/Math";
import RequestErrorEvent from "terriajs-cesium/Source/Core/RequestErrorEvent";
import CommonStrata from "../../Definition/CommonStrata";
import createStratumInstance from "../../Definition/createStratumInstance";
import proxyCatalogItemUrl from "../proxyCatalogItemUrl";
import ResultPendingCatalogItem from "../ResultPendingCatalogItem";
import UserDrawing from "../../UserDrawing";
import { formatDimensionsForOws } from "./WebMapServiceCatalogItem";
import isDefined from "../../../Core/isDefined";
import makeRealPromise from "../../../Core/makeRealPromise";
import TerriaError from "../../../Core/TerriaError";
import { InfoSectionTraits } from "../../../Traits/TraitsClasses/CatalogMemberTraits";
var sprintf = require("terriajs-cesium/Source/ThirdParty/sprintf").default;
export const callWebCoverageService = function (wmsCatalogItem) {
    return new Promise((resolve, reject) => {
        const terria = wmsCatalogItem.terria;
        runInAction(() => (terria.pickedFeatures = undefined));
        let rectangle;
        const userDrawing = new UserDrawing({
            terria: wmsCatalogItem.terria,
            messageHeader: "Click two points to draw a retangle extent.",
            buttonText: "Download Extent",
            onPointClicked: () => {
                var _a, _b, _c, _d, _e;
                if (userDrawing.pointEntities.entities.values.length >= 2) {
                    rectangle = (_e = (_d = (_c = (_b = (_a = userDrawing === null || userDrawing === void 0 ? void 0 : userDrawing.otherEntities) === null || _a === void 0 ? void 0 : _a.entities) === null || _b === void 0 ? void 0 : _b.getById("rectangle")) === null || _c === void 0 ? void 0 : _c.rectangle) === null || _d === void 0 ? void 0 : _d.coordinates) === null || _e === void 0 ? void 0 : _e.getValue(wmsCatalogItem.terria.timelineClock.currentTime);
                }
            },
            onCleanUp: () => {
                if (isDefined(rectangle)) {
                    launch(wmsCatalogItem, rectangle)
                        .then(resolve)
                        .catch(reject);
                }
                else {
                    reject("Invalid drawn extent.");
                }
            },
            allowPolygon: false,
            drawRectangle: true
        });
        userDrawing.enterDrawMode();
    });
};
async function launch(wmsCatalogItem, bbox) {
    var _a, _b, _c;
    bbox.west = CesiumMath.toDegrees(bbox.west);
    bbox.south = CesiumMath.toDegrees(bbox.south);
    bbox.east = CesiumMath.toDegrees(bbox.east);
    bbox.north = CesiumMath.toDegrees(bbox.north);
    const query = {
        service: "WCS",
        request: "GetCoverage",
        version: "1.0.0",
        format: "GeoTIFF",
        crs: "EPSG:4326",
        width: 1024,
        height: Math.round((1024 * bbox.height) / bbox.width),
        coverage: wmsCatalogItem.linkedWcsCoverage,
        bbox: `${bbox.west},${bbox.south},${bbox.east},${bbox.north}`,
        ...formatDimensionsForOws(wmsCatalogItem.dimensions),
        time: wmsCatalogItem.currentDiscreteTimeTag,
        styles: wmsCatalogItem.styles
    };
    var uri = new URI(wmsCatalogItem.linkedWcsUrl).query(query);
    var url = proxyCatalogItemUrl(wmsCatalogItem, uri.toString());
    var now = new Date();
    var timestamp = sprintf("%04d-%02d-%02dT%02d:%02d:%02d", now.getFullYear(), now.getMonth() + 1, now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds());
    const asyncResult = new ResultPendingCatalogItem(`WCS: ${wmsCatalogItem.name} ${timestamp}`, wmsCatalogItem.terria);
    runInAction(() => {
        asyncResult.setTrait(CommonStrata.user, "shortReport", i18next.t("models.wcs.asyncPendingDescription", {
            name: wmsCatalogItem.name,
            timestamp: timestamp
        }));
        const info = createStratumInstance(InfoSectionTraits, {
            name: "Inputs",
            content: '<table class="cesium-infoBox-defaultTable">' +
                [
                    { name: "Bounding box", value: query.bbox },
                    { name: "Format", value: query.format }
                ].reduce(function (previousValue, parameter) {
                    return (previousValue +
                        "<tr>" +
                        '<td style="vertical-align: middle">' +
                        parameter.name +
                        "</td>" +
                        "<td>" +
                        parameter.value +
                        "</td>" +
                        "</tr>");
                }, "") +
                "</table>"
        });
        asyncResult.setTrait(CommonStrata.user, "info", [info]);
    });
    asyncResult.terria.workbench.add(asyncResult);
    try {
        const blob = await makeRealPromise(loadBlob(url));
        runInAction(() => asyncResult.terria.workbench.remove(asyncResult));
        return { name: `${wmsCatalogItem.name} clip.tiff`, file: blob };
    }
    catch (error) {
        if (error instanceof TerriaError) {
            throw error;
        }
        // Attempt to get error message out of XML response
        if (error instanceof RequestErrorEvent &&
            isDefined((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.type) &&
            ((_b = error.response.type) === null || _b === void 0 ? void 0 : _b.indexOf("xml")) !== -1) {
            try {
                const xml = new DOMParser().parseFromString(await error.response.text(), "text/xml");
                if (xml.documentElement.localName === "ServiceExceptionReport") {
                    const message = (_c = xml.getElementsByTagName("ServiceException")) === null || _c === void 0 ? void 0 : _c[0].innerHTML;
                    if (isDefined(message)) {
                        error = message;
                    }
                }
            }
            catch (xmlParseError) {
                console.log("Failed to parse WCS response");
                console.log(xmlParseError);
            }
        }
        throw new TerriaError({
            sender: wmsCatalogItem,
            title: i18next.t("models.wcs.exportFailedTitle"),
            message: i18next.t("models.wcs.exportFailedMessageII", {
                error
            })
        });
    }
    finally {
        runInAction(() => asyncResult.terria.workbench.remove(asyncResult));
    }
}
//# sourceMappingURL=callWebCoverageService.js.map