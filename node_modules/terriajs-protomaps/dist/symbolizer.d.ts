import Point from '@mapbox/point-geometry';
import { Feature, Bbox } from './tilecache';
import { NumberAttr, ColorAttr, TextAttr, FontAttr } from './attribute';
import { Label, Layout } from './labeler';
export interface PaintSymbolizer {
    before?(ctx: any, z: number): void;
    draw(ctx: any, geom: Point[][], z: number, feature: Feature): void;
}
export interface LabelSymbolizer {
    place(layout: Layout, geom: Point[][], feature: Feature): Label[] | undefined;
}
export declare const createPattern: (width: number, height: number, fn: (canvas: any, ctx: any) => void) => HTMLCanvasElement;
export declare class PolygonSymbolizer implements PaintSymbolizer {
    pattern: any;
    fill: ColorAttr;
    opacity: NumberAttr;
    per_feature: boolean;
    constructor(options: any);
    before(ctx: any, z: number): void;
    draw(ctx: any, geom: Point[][], z: number, f: Feature): void;
}
export declare function arr(base: number, a: number[]): ((z: number) => number);
export declare function exp(base: number, stops: number[][]): ((z: number) => number);
export declare class LineSymbolizer implements PaintSymbolizer {
    color: ColorAttr;
    width: NumberAttr;
    opacity: NumberAttr;
    dash: any;
    dashColor: ColorAttr;
    dashWidth: NumberAttr;
    skip: boolean;
    per_feature: boolean;
    constructor(options: any);
    before(ctx: any, z: number): void;
    draw(ctx: any, geom: Point[][], z: number, f: Feature): void;
}
export declare class IconSymbolizer implements LabelSymbolizer {
    sprites: any;
    name: string;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[];
}
export declare class CircleSymbolizer implements LabelSymbolizer, PaintSymbolizer {
    radius: NumberAttr;
    fill: ColorAttr;
    stroke: ColorAttr;
    width: NumberAttr;
    opacity: NumberAttr;
    constructor(options: any);
    draw(ctx: any, geom: Point[][], z: number, f: Feature): void;
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[];
}
export declare class ShieldSymbolizer implements LabelSymbolizer {
    font: FontAttr;
    text: TextAttr;
    background: ColorAttr;
    fill: ColorAttr;
    padding: NumberAttr;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], f: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class FlexSymbolizer implements LabelSymbolizer {
    list: LabelSymbolizer[];
    constructor(list: LabelSymbolizer[], options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: Bbox[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class GroupSymbolizer implements LabelSymbolizer {
    list: LabelSymbolizer[];
    constructor(list: LabelSymbolizer[]);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: Bbox[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class CenteredSymbolizer implements LabelSymbolizer {
    symbolizer: LabelSymbolizer;
    constructor(symbolizer: LabelSymbolizer);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            maxX: any;
            minY: number;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class TextSymbolizer implements LabelSymbolizer {
    font: FontAttr;
    text: TextAttr;
    fill: ColorAttr;
    stroke: ColorAttr;
    width: NumberAttr;
    maxLineCodeUnits: number;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: any;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class CenteredTextSymbolizer implements LabelSymbolizer {
    centered: LabelSymbolizer;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): Label[] | undefined;
}
export declare class OffsetSymbolizer implements LabelSymbolizer {
    offset: NumberAttr;
    symbolizer: LabelSymbolizer;
    constructor(symbolizer: LabelSymbolizer, options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: any;
            minY: any;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class OffsetTextSymbolizer implements LabelSymbolizer {
    symbolizer: LabelSymbolizer;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): Label[] | undefined;
}
export declare class LineLabelSymbolizer implements LabelSymbolizer {
    font: FontAttr;
    text: TextAttr;
    fill: ColorAttr;
    stroke: ColorAttr;
    width: NumberAttr;
    offset: NumberAttr;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
export declare class PolygonLabelSymbolizer implements LabelSymbolizer {
    symbolizer: LabelSymbolizer;
    constructor(options: any);
    place(layout: Layout, geom: Point[][], feature: Feature): {
        anchor: any;
        bboxes: {
            minX: number;
            minY: number;
            maxX: any;
            maxY: any;
        }[];
        draw: (ctx: any) => void;
    }[] | undefined;
}
